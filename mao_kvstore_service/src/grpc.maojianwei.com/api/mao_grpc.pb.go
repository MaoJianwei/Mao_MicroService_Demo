// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BigmaoClient is the client API for Bigmao service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BigmaoClient interface {
	GetRequest(ctx context.Context, in *GetData, opts ...grpc.CallOption) (*GetResult, error)
	PutRequest(ctx context.Context, in *PutData, opts ...grpc.CallOption) (*PutResult, error)
}

type bigmaoClient struct {
	cc grpc.ClientConnInterface
}

func NewBigmaoClient(cc grpc.ClientConnInterface) BigmaoClient {
	return &bigmaoClient{cc}
}

func (c *bigmaoClient) GetRequest(ctx context.Context, in *GetData, opts ...grpc.CallOption) (*GetResult, error) {
	out := new(GetResult)
	err := c.cc.Invoke(ctx, "/main.Bigmao/GetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigmaoClient) PutRequest(ctx context.Context, in *PutData, opts ...grpc.CallOption) (*PutResult, error) {
	out := new(PutResult)
	err := c.cc.Invoke(ctx, "/main.Bigmao/PutRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BigmaoServer is the server API for Bigmao service.
// All implementations must embed UnimplementedBigmaoServer
// for forward compatibility
type BigmaoServer interface {
	GetRequest(context.Context, *GetData) (*GetResult, error)
	PutRequest(context.Context, *PutData) (*PutResult, error)
	mustEmbedUnimplementedBigmaoServer()
}

// UnimplementedBigmaoServer must be embedded to have forward compatible implementations.
type UnimplementedBigmaoServer struct {
}

func (UnimplementedBigmaoServer) GetRequest(context.Context, *GetData) (*GetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedBigmaoServer) PutRequest(context.Context, *PutData) (*PutResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRequest not implemented")
}
func (UnimplementedBigmaoServer) mustEmbedUnimplementedBigmaoServer() {}

// UnsafeBigmaoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BigmaoServer will
// result in compilation errors.
type UnsafeBigmaoServer interface {
	mustEmbedUnimplementedBigmaoServer()
}

func RegisterBigmaoServer(s grpc.ServiceRegistrar, srv BigmaoServer) {
	s.RegisterService(&Bigmao_ServiceDesc, srv)
}

func _Bigmao_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigmaoServer).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Bigmao/GetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigmaoServer).GetRequest(ctx, req.(*GetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bigmao_PutRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigmaoServer).PutRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Bigmao/PutRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigmaoServer).PutRequest(ctx, req.(*PutData))
	}
	return interceptor(ctx, in, info, handler)
}

// Bigmao_ServiceDesc is the grpc.ServiceDesc for Bigmao service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bigmao_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Bigmao",
	HandlerType: (*BigmaoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequest",
			Handler:    _Bigmao_GetRequest_Handler,
		},
		{
			MethodName: "PutRequest",
			Handler:    _Bigmao_PutRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mao.proto",
}
